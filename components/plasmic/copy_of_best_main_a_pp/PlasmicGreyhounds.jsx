// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: RPnMKWgCkZkYcGGLNc86X
// Component: lzjrvESMBd5gK
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import RaceCardsInfo from "../../RaceCardsInfo"; // plasmic-import: -nGW01M97Po_80/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_best_main_a_pp.module.css"; // plasmic-import: RPnMKWgCkZkYcGGLNc86X/projectcss
import sty from "./PlasmicGreyhounds.module.css"; // plasmic-import: lzjrvESMBd5gK/css

export const PlasmicGreyhounds__VariantProps = new Array();

export const PlasmicGreyhounds__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGreyhounds__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "openTrack",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "raceCardsInfo.currentRaceOpen",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "updateButtonVisable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "raceCardsInfo.clickOutside",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });
  const new$Queries = {
    query: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "vNoYXpnXuGGu6h5PJvBFma",
            opId: "58172cb2-8717-40be-b4f4-03410834153e",
            userArgs: {},
            cacheKey: "plasmic.$.NtjCidMT2ApMR.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),
    query2: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "oCgr2NWAgmPcso9qLg61re",
            opId: "44fed8aa-4bbb-4881-93d6-4cd097674079",
            userArgs: {},
            cacheKey: "plasmic.$.U09HGW7pYyyJY.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <section
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__eD5Qt)}>
                {true ? (
                  <div
                    data-plasmic-name={"leftSide"}
                    data-plasmic-override={overrides.leftSide}
                    className={classNames(projectcss.all, sty.leftSide)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bWlu2
                      )}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToHomepage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "navigation",
                                    interactionUuid: "kHhNh1X26Pxif",
                                    componentUuid: "lzjrvESMBd5gK",
                                    argName: "destination"
                                  },
                                  () => `/`
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "kHhNh1X26Pxif",
                                  componentUuid: "lzjrvESMBd5gK"
                                },
                                () =>
                                  (({ destination }) => {
                                    __nextRouter?.push(destination);
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["goToHomepage"] === "object" &&
                          typeof $steps["goToHomepage"].then === "function"
                        ) {
                          $steps["goToHomepage"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "kHhNh1X26Pxif",
                              componentUuid: "lzjrvESMBd5gK"
                            },
                            $steps["goToHomepage"]
                          );
                        }
                      }}
                    >
                      {"Menu"}
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"leftSide2"}
                    data-plasmic-override={overrides.leftSide2}
                    className={classNames(projectcss.all, sty.leftSide2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__knm7A
                      )}
                    >
                      {"The Greyhounds"}
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"rightSide"}
                    data-plasmic-override={overrides.rightSide}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.rightSide)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yS8U6
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const now = new Date();
                              let hours = now.getHours();
                              let minutes = now.getMinutes();
                              let ampm = hours >= 12 ? " pm" : " am";
                              hours = hours % 12;
                              hours = hours ? hours : 12;
                              minutes = minutes < 10 ? "0" + minutes : minutes;
                              const time = hours + ":" + minutes + ampm;
                              return time;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__udyey
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              new Date().toLocaleString("default", {
                                month: "long"
                              }) +
                              " " +
                              (() => {
                                const dayOfMonth = new Date().getDate();
                                let ordinalNumber;
                                if (
                                  dayOfMonth === 1 ||
                                  dayOfMonth === 21 ||
                                  dayOfMonth === 31
                                ) {
                                  ordinalNumber = `${dayOfMonth}st`;
                                } else if (
                                  dayOfMonth === 2 ||
                                  dayOfMonth === 22
                                ) {
                                  ordinalNumber = `${dayOfMonth}nd`;
                                } else if (
                                  dayOfMonth === 3 ||
                                  dayOfMonth === 23
                                ) {
                                  ordinalNumber = `${dayOfMonth}rd`;
                                } else {
                                  ordinalNumber = `${dayOfMonth}th`;
                                }
                                return ordinalNumber;
                              })()
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </p.Stack>
                ) : null}
              </div>
            </section>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8SYpJ)}
              onDoubleClick={async event => {
                const $steps = {};
                $steps["updateUpdateButtonVisable"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "bpnNXCqKBHwhe",
                            componentUuid: "lzjrvESMBd5gK",
                            argName: "variable"
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ["updateButtonVisable"]
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "bpnNXCqKBHwhe",
                            componentUuid: "lzjrvESMBd5gK",
                            argName: "operation"
                          },
                          () => 4
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "bpnNXCqKBHwhe",
                          componentUuid: "lzjrvESMBd5gK"
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            const oldValue = p.get(objRoot, variablePath);
                            p.set(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateUpdateButtonVisable"] === "object" &&
                  typeof $steps["updateUpdateButtonVisable"].then === "function"
                ) {
                  $steps["updateUpdateButtonVisable"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "bpnNXCqKBHwhe",
                      componentUuid: "lzjrvESMBd5gK"
                    },
                    $steps["updateUpdateButtonVisable"]
                  );
                }
              }}
            >
              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3
                )}
              >
                {"Today's Races"}
              </h3>
              {(() => {
                try {
                  return $state.updateButtonVisable === true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eWm6H
                  )}
                  onClick={async event => {
                    const $steps = {};
                    $steps["goToGreyhounds2"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "navigation",
                                interactionUuid: "NiV13AZ8yVHvu",
                                componentUuid: "lzjrvESMBd5gK",
                                argName: "destination"
                              },
                              () => `/Greyhounds_Update`
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "NiV13AZ8yVHvu",
                              componentUuid: "lzjrvESMBd5gK"
                            },
                            () =>
                              (({ destination }) => {
                                __nextRouter?.push(destination);
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["goToGreyhounds2"] === "object" &&
                      typeof $steps["goToGreyhounds2"].then === "function"
                    ) {
                      $steps["goToGreyhounds2"] = await __wrapUserPromise(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "NiV13AZ8yVHvu",
                          componentUuid: "lzjrvESMBd5gK"
                        },
                        $steps["goToGreyhounds2"]
                      );
                    }
                  }}
                >
                  {"Update"}
                </div>
              ) : null}
            </p.Stack>
          ) : null}
          {(() => {
            try {
              return $state.openTrack !== "romford";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__b0Bz8
              )}
              onClick={async event => {
                const $steps = {};
                $steps["updateOpenTrack"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "FtEw0QeCpqiyY",
                            componentUuid: "lzjrvESMBd5gK",
                            argName: "variable"
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ["openTrack"]
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "FtEw0QeCpqiyY",
                            componentUuid: "lzjrvESMBd5gK",
                            argName: "operation"
                          },
                          () => 0
                        ),
                        value: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "FtEw0QeCpqiyY",
                            componentUuid: "lzjrvESMBd5gK",
                            argName: "value"
                          },
                          () => "romford"
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "FtEw0QeCpqiyY",
                          componentUuid: "lzjrvESMBd5gK"
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateOpenTrack"] === "object" &&
                  typeof $steps["updateOpenTrack"].then === "function"
                ) {
                  $steps["updateOpenTrack"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "FtEw0QeCpqiyY",
                      componentUuid: "lzjrvESMBd5gK"
                    },
                    $steps["updateOpenTrack"]
                  );
                }
              }}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $queries.query.schema.label;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Romford";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          {true ? (
            <Reveal
              data-plasmic-name={"reveal"}
              data-plasmic-override={overrides.reveal}
              className={classNames("__wab_instance", sty.reveal)}
              triggerOnce={true}
            >
              {(() => {
                try {
                  return $state.openTrack === "romford";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <RaceCardsInfo
                  data-plasmic-name={"raceCardsInfo"}
                  data-plasmic-override={overrides.raceCardsInfo}
                  className={classNames("__wab_instance", sty.raceCardsInfo)}
                  clickOutside={p.generateStateValueProp($state, [
                    "raceCardsInfo",
                    "clickOutside"
                  ])}
                  ifTrackOpen={(() => {
                    try {
                      return $state.openTrack === "romford";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  onClickOutsideChange={p.generateStateOnChangeProp($state, [
                    "raceCardsInfo",
                    "clickOutside"
                  ])}
                  onCurrentRaceOpenChange={p.generateStateOnChangeProp($state, [
                    "raceCardsInfo",
                    "currentRaceOpen"
                  ])}
                  raceNameValue={(() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
            </Reveal>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "title",
    "leftSide",
    "leftSide2",
    "rightSide",
    "h3",
    "reveal",
    "raceCardsInfo"
  ],

  title: ["title", "leftSide", "leftSide2", "rightSide"],
  leftSide: ["leftSide"],
  leftSide2: ["leftSide2"],
  rightSide: ["rightSide"],
  h3: ["h3"],
  reveal: ["reveal", "raceCardsInfo"],
  raceCardsInfo: ["raceCardsInfo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGreyhounds__ArgProps,
          internalVariantPropNames: PlasmicGreyhounds__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGreyhounds__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGreyhounds";
  } else {
    func.displayName = `PlasmicGreyhounds.${nodeName}`;
  }
  return func;
}

export const PlasmicGreyhounds = Object.assign(
  // Top-level PlasmicGreyhounds renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    title: makeNodeComponent("title"),
    leftSide: makeNodeComponent("leftSide"),
    leftSide2: makeNodeComponent("leftSide2"),
    rightSide: makeNodeComponent("rightSide"),
    h3: makeNodeComponent("h3"),
    reveal: makeNodeComponent("reveal"),
    raceCardsInfo: makeNodeComponent("raceCardsInfo"),
    // Metadata about props expected for PlasmicGreyhounds
    internalVariantProps: PlasmicGreyhounds__VariantProps,
    internalArgProps: PlasmicGreyhounds__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicGreyhounds;
/* prettier-ignore-end */
