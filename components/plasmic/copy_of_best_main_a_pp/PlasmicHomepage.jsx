// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: RPnMKWgCkZkYcGGLNc86X
// Component: 8U6FZICt13WU9
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_best_main_a_pp.module.css"; // plasmic-import: RPnMKWgCkZkYcGGLNc86X/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 8U6FZICt13WU9/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "itemSelection",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { page_title: "Homepage", "Page value": 0 },
          { page_title: "Music", "Page value": 1 },
          { page_title: "Greyhounds", "Page value": 2 },
          { page_title: "Other Random Stuff", "Page value": 3 }
        ]
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"landingPage"}
          data-plasmic-override={overrides.landingPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.landingPage
          )}
        >
          {true ? (
            <section
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                {true ? (
                  <div
                    data-plasmic-name={"leftSide"}
                    data-plasmic-override={overrides.leftSide}
                    className={classNames(projectcss.all, sty.leftSide)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ewG1F
                      )}
                    >
                      {"Menu"}
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"rightSide"}
                    data-plasmic-override={overrides.rightSide}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.rightSide)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fu7GS
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const targetDate = new Date("2024-01-04");
                              const currentDate = new Date();
                              const timeDiff =
                                targetDate.getTime() - currentDate.getTime();
                              const days = Math.ceil(
                                timeDiff / (1000 * 3600 * 24)
                              );
                              const weeks = Math.floor(days / 7);
                              const remainingDays = days % 7;
                              const months = Math.floor(weeks / 4);
                              const remainingWeeks = weeks % 4;
                              let result = `${months} months, ${remainingWeeks} week, ${remainingDays} days`;
                              if (months === 1) {
                                result = result.replace("months", "month");
                              }
                              if (weeks === 1) {
                                result = result.replace("weeks", "week");
                              }
                              if (remainingDays === 1) {
                                result = result.replace("days", "day");
                              }
                              if (remainingDays === 6) {
                                result = result.replace("days", "days");
                              } else {
                                result = result.replace("days", "day");
                              }
                              return result;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yOczE
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const now = new Date();
                              let hours = now.getHours();
                              let minutes = now.getMinutes();
                              let ampm = hours >= 12 ? " pm" : " am";
                              hours = hours % 12;
                              hours = hours ? hours : 12;
                              minutes = minutes < 10 ? "0" + minutes : minutes;
                              const time = hours + ":" + minutes + ampm;
                              return time;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r0LU
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              new Date().toLocaleString("default", {
                                month: "long"
                              }) +
                              " " +
                              (() => {
                                const dayOfMonth = new Date().getDate();
                                let ordinalNumber;
                                if (
                                  dayOfMonth === 1 ||
                                  dayOfMonth === 21 ||
                                  dayOfMonth === 31
                                ) {
                                  ordinalNumber = `${dayOfMonth}st`;
                                } else if (
                                  dayOfMonth === 2 ||
                                  dayOfMonth === 22
                                ) {
                                  ordinalNumber = `${dayOfMonth}nd`;
                                } else if (
                                  dayOfMonth === 3 ||
                                  dayOfMonth === 23
                                ) {
                                  ordinalNumber = `${dayOfMonth}rd`;
                                } else {
                                  ordinalNumber = `${dayOfMonth}th`;
                                }
                                return ordinalNumber;
                              })()
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </p.Stack>
                ) : null}
              </div>
            </section>
          ) : null}
          {true ? (
            <section
              data-plasmic-name={"contents"}
              data-plasmic-override={overrides.contents}
              className={classNames(projectcss.all, sty.contents)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gOfYt
                )}
                onClick={async event => {
                  const $steps = {};
                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "customFunction",
                              interactionUuid: "mvUyEKjAQfl-",
                              componentUuid: "8U6FZICt13WU9",
                              argName: "customFunction"
                            },
                            () => () => {}
                          )
                        };
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "customFunction",
                            interactionUuid: "mvUyEKjAQfl-",
                            componentUuid: "8U6FZICt13WU9"
                          },
                          () =>
                            (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "customFunction",
                        interactionUuid: "mvUyEKjAQfl-",
                        componentUuid: "8U6FZICt13WU9"
                      },
                      $steps["runCode"]
                    );
                  }
                }}
              >
                {"Hi Fred, what do you want to do...."}
              </div>
            </section>
          ) : null}
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            big={false}
            cascade={true}
            className={classNames("__wab_instance", sty.reveal)}
            delay={0.5}
            direction={"up"}
            effect={"fade"}
            triggerOnce={false}
          >
            {true ? (
              <section
                data-plasmic-name={"music"}
                data-plasmic-override={overrides.music}
                className={classNames(projectcss.all, sty.music)}
              >
                {(
                  (() => {
                    try {
                      return $state.itemSelection.slice(1);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })() ?? []
                ).map((currentItem, currentIndex) => (
                  <div
                    data-plasmic-name={"pageSelectionItems"}
                    data-plasmic-override={overrides.pageSelectionItems}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.pageSelectionItems
                    )}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "navigation",
                                  interactionUuid: "TQtl6M6tZ4qFA",
                                  componentUuid: "8U6FZICt13WU9",
                                  argName: "destination"
                                },
                                () =>
                                  (() => {
                                    try {
                                      return "/" + currentItem.page_title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "TQtl6M6tZ4qFA",
                                componentUuid: "8U6FZICt13WU9"
                              },
                              () =>
                                (({ destination }) => {
                                  __nextRouter?.push(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "TQtl6M6tZ4qFA",
                            componentUuid: "8U6FZICt13WU9"
                          },
                          $steps["goToPage"]
                        );
                      }
                    }}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.page_title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Placeholder Item";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                ))}
              </section>
            ) : null}
          </Reveal>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  landingPage: [
    "landingPage",
    "title",
    "freeBox",
    "leftSide",
    "rightSide",
    "contents",
    "reveal",
    "music",
    "pageSelectionItems"
  ],

  title: ["title", "freeBox", "leftSide", "rightSide"],
  freeBox: ["freeBox", "leftSide", "rightSide"],
  leftSide: ["leftSide"],
  rightSide: ["rightSide"],
  contents: ["contents"],
  reveal: ["reveal", "music", "pageSelectionItems"],
  music: ["music", "pageSelectionItems"],
  pageSelectionItems: ["pageSelectionItems"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "landingPage") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("landingPage"),
  {
    // Helper components rendering sub-elements
    title: makeNodeComponent("title"),
    freeBox: makeNodeComponent("freeBox"),
    leftSide: makeNodeComponent("leftSide"),
    rightSide: makeNodeComponent("rightSide"),
    contents: makeNodeComponent("contents"),
    reveal: makeNodeComponent("reveal"),
    music: makeNodeComponent("music"),
    pageSelectionItems: makeNodeComponent("pageSelectionItems"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
