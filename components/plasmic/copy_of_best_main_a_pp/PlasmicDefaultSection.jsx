// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: RPnMKWgCkZkYcGGLNc86X
// Component: k8PcH5iLYtxNU
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_best_main_a_pp.module.css"; // plasmic-import: RPnMKWgCkZkYcGGLNc86X/projectcss
import sty from "./PlasmicDefaultSection.module.css"; // plasmic-import: k8PcH5iLYtxNU/css

export const PlasmicDefaultSection__VariantProps = new Array();

export const PlasmicDefaultSection__ArgProps = new Array("content");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDefaultSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <section className={classNames(projectcss.all, sty.section__x8C8V)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ldPsi
                )}
              >
                {"Modes"}
              </div>
            </section>
            <section className={classNames(projectcss.all, sty.section__qZFta)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vVwM3
                )}
              >
                {"What the Fuck are modes??? "}
              </div>
            </section>
            <section className={classNames(projectcss.all, sty.section__gTkEl)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ozhk4
                )}
              >
                {
                  "Look buddy, you and me are in the same boat. Cause I'm lost. Like, I always hear people talk about them and when you're supposed to use them, but that means nothing to me. Anyways, we're gonna figure out a solution.. Got it??"
                }
              </div>
            </section>
          </React.Fragment>
        ),

        value: args.content
      })}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDefaultSection__ArgProps,
          internalVariantPropNames: PlasmicDefaultSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDefaultSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDefaultSection";
  } else {
    func.displayName = `PlasmicDefaultSection.${nodeName}`;
  }
  return func;
}

export const PlasmicDefaultSection = Object.assign(
  // Top-level PlasmicDefaultSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicDefaultSection
    internalVariantProps: PlasmicDefaultSection__VariantProps,
    internalArgProps: PlasmicDefaultSection__ArgProps
  }
);

export default PlasmicDefaultSection;
/* prettier-ignore-end */
