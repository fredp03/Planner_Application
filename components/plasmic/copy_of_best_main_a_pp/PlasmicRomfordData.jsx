// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: RPnMKWgCkZkYcGGLNc86X
// Component: Ojh5kx57LiqlYD
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_best_main_a_pp.module.css"; // plasmic-import: RPnMKWgCkZkYcGGLNc86X/projectcss
import sty from "./PlasmicRomfordData.module.css"; // plasmic-import: Ojh5kx57LiqlYD/css

export const PlasmicRomfordData__VariantProps = new Array();

export const PlasmicRomfordData__ArgProps = new Array(
  "raceNumber2",
  "onRaceNumber2Change",
  "id2",
  "onId2Change",
  "setRaceId"
);

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRomfordData__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "raceNumber2",
        type: "writable",
        variableType: "text",
        valueProp: "raceNumber2",
        onChangeProp: "onRaceNumber2Change"
      },
      {
        path: "id2",
        type: "writable",
        variableType: "number",
        valueProp: "id2",
        onChangeProp: "onId2Change"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });
  const new$Queries = {
    query: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "vNoYXpnXuGGu6h5PJvBFma",
            opId: "7c2378e5-a2ea-4968-84c4-e88eadedcc83",
            userArgs: {},
            cacheKey: "plasmic.$.zhMXDYdXDfNKwY.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }
  return true ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"romfordData"}
      data-plasmic-override={overrides.romfordData}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.romfordData
      )}
    >
      <div
        data-plasmic-name={"raceNumber"}
        data-plasmic-override={overrides.raceNumber}
        className={classNames(projectcss.all, sty.raceNumber)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nNfHi
          )}
          onClick={async event => {
            const $steps = {};
            $steps["updateRaceNumber2"] = true
              ? (() => {
                  const actionArgs = {
                    variable: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "x9D7uEyV4AOFQo",
                        componentUuid: "Ojh5kx57LiqlYD",
                        argName: "variable"
                      },
                      () => ({
                        objRoot: $state,
                        variablePath: ["raceNumber2"]
                      })
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "x9D7uEyV4AOFQo",
                        componentUuid: "Ojh5kx57LiqlYD",
                        argName: "operation"
                      },
                      () => 0
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "x9D7uEyV4AOFQo",
                      componentUuid: "Ojh5kx57LiqlYD"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updateRaceNumber2"] === "object" &&
              typeof $steps["updateRaceNumber2"].then === "function"
            ) {
              $steps["updateRaceNumber2"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "x9D7uEyV4AOFQo",
                  componentUuid: "Ojh5kx57LiqlYD"
                },
                $steps["updateRaceNumber2"]
              );
            }
          }}
        >
          <React.Fragment>
            {(() => {
              try {
                return $state.raceNumber2 || "Race Number";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Race Number";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <div
        data-plasmic-name={"id"}
        data-plasmic-override={overrides.id}
        className={classNames(projectcss.all, sty.id)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__fgrF2
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $state.id2;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "URL";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  romfordData: ["romfordData", "raceNumber", "id"],
  raceNumber: ["raceNumber"],
  id: ["id"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRomfordData__ArgProps,
          internalVariantPropNames: PlasmicRomfordData__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRomfordData__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "romfordData") {
    func.displayName = "PlasmicRomfordData";
  } else {
    func.displayName = `PlasmicRomfordData.${nodeName}`;
  }
  return func;
}

export const PlasmicRomfordData = Object.assign(
  // Top-level PlasmicRomfordData renders the root element
  makeNodeComponent("romfordData"),
  {
    // Helper components rendering sub-elements
    raceNumber: makeNodeComponent("raceNumber"),
    id: makeNodeComponent("id"),
    // Metadata about props expected for PlasmicRomfordData
    internalVariantProps: PlasmicRomfordData__VariantProps,
    internalArgProps: PlasmicRomfordData__ArgProps
  }
);

export default PlasmicRomfordData;
/* prettier-ignore-end */
