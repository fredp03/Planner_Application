// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: RPnMKWgCkZkYcGGLNc86X
// Component: -nGW01M97Po_80
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ExampleTrapNameSelector from "../../ExampleTrapNameSelector"; // plasmic-import: bntqLBXoTFWXnO/component
import DataValue from "../../DataValue"; // plasmic-import: CgE6xonf7o8R4m/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_best_main_a_pp.module.css"; // plasmic-import: RPnMKWgCkZkYcGGLNc86X/projectcss
import sty from "./PlasmicRaceCardsInfo.module.css"; // plasmic-import: -nGW01M97Po_80/css

export const PlasmicRaceCardsInfo__VariantProps = new Array();

export const PlasmicRaceCardsInfo__ArgProps = new Array(
  "ifTrackOpen",
  "raceNameValue",
  "exampleTrackSelected",
  "onCurrentRaceOpenChange",
  "clickedOutside",
  "clickOutside",
  "onClickOutsideChange"
);

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRaceCardsInfo__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          ifTrackOpen: false,
          clickedOutside: false
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "exampleTrapNameSelector[].selected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "currentRaceOpen",
        type: "readonly",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        onChangeProp: "onCurrentRaceOpenChange"
      },
      {
        path: "dataValue[].onDataClick",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dataValue2[].onDataClick",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dataValue3[].onDataClick",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dataValue4[].onDataClick",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dataValue5[].onDataClick",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dataValue6[].onDataClick",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dataValue7[].onDataClick",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dataValue8[].onDataClick",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "clickOutside",
        type: "writable",
        variableType: "boolean",
        valueProp: "clickOutside",
        onChangeProp: "onClickOutsideChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });
  const new$Queries = {
    getData: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "oCgr2NWAgmPcso9qLg61re",
            opId: "b083c8dc-f7e8-43c0-8f2c-e5fc15ba9a61",
            userArgs: {
              path: [$state.currentRaceOpen]
            },
            cacheKey: "plasmic.$.BzfAxd9GPaLxkx.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),
    query: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "vNoYXpnXuGGu6h5PJvBFma",
            opId: "7c2378e5-a2ea-4968-84c4-e88eadedcc83",
            userArgs: {},
            cacheKey: "plasmic.$.s0IBq8fXgFRGBQ.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }
  return true ? (
    <div
      data-plasmic-name={"romfordInfo"}
      data-plasmic-override={overrides.romfordInfo}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.romfordInfo
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"carousel"}
          data-plasmic-override={overrides.carousel}
          hasGap={true}
          className={classNames(projectcss.all, sty.carousel)}
        >
          {(
            (() => {
              try {
                return $queries.query.data;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })() ?? []
          ).map((currentItem, currentIndex) =>
            (() => {
              const child$Props = {
                className: classNames(
                  "__wab_instance",
                  sty.exampleTrapNameSelector
                ),
                key: currentIndex,
                onChangeTab: async event => {
                  const $steps = {};
                  $steps["updateCurrentRaceOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "4eET6ZxHcfGT5Q",
                              componentUuid: "-nGW01M97Po_80",
                              argName: "variable"
                            },
                            () => ({
                              objRoot: $state,
                              variablePath: ["currentRaceOpen"]
                            })
                          ),
                          operation: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "4eET6ZxHcfGT5Q",
                              componentUuid: "-nGW01M97Po_80",
                              argName: "operation"
                            },
                            () => 0
                          ),
                          value: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "4eET6ZxHcfGT5Q",
                              componentUuid: "-nGW01M97Po_80",
                              argName: "value"
                            },
                            () =>
                              currentIndex + Number($queries.query.data[0].ID)
                          )
                        };
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "4eET6ZxHcfGT5Q",
                            componentUuid: "-nGW01M97Po_80"
                          },
                          () =>
                            (({ variable, value, startIndex, deleteCount }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              p.set(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["updateCurrentRaceOpen"] === "object" &&
                    typeof $steps["updateCurrentRaceOpen"].then === "function"
                  ) {
                    $steps["updateCurrentRaceOpen"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "4eET6ZxHcfGT5Q",
                        componentUuid: "-nGW01M97Po_80"
                      },
                      $steps["updateCurrentRaceOpen"]
                    );
                  }
                },
                onSelectedChange: p.generateStateOnChangeProp($state, [
                  "exampleTrapNameSelector",
                  currentIndex,
                  "selected"
                ]),
                raceNameValue: (() => {
                  try {
                    return currentItem.Race;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                selected: p.generateStateValueProp($state, [
                  "exampleTrapNameSelector",
                  currentIndex,
                  "selected"
                ]),
                selectedRaceNumber: (() => {
                  try {
                    return currentIndex + Number($queries.query.data[0].ID);
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              };
              p.initializePlasmicStates(
                $state,
                [
                  {
                    name: "exampleTrapNameSelector[].selected",
                    initFunc: ({ $props, $state, $queries }) =>
                      (() => {
                        try {
                          return (
                            $state.currentRaceOpen ===
                            currentIndex + Number($queries.query.data[0].ID)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                  }
                ],

                [currentIndex]
              );
              return (
                <ExampleTrapNameSelector
                  data-plasmic-name={"exampleTrapNameSelector"}
                  data-plasmic-override={overrides.exampleTrapNameSelector}
                  {...child$Props}
                />
              );
            })()
          )}
        </p.Stack>
      ) : null}
      {(() => {
        try {
          return $state.currentRaceOpen !== 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"raceInfo"}
          data-plasmic-override={overrides.raceInfo}
          className={classNames(projectcss.all, sty.raceInfo)}
        >
          {true ? (
            <div
              data-plasmic-name={"title2"}
              data-plasmic-override={overrides.title2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.title2
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $queries.getData.data.response.race_summary
                      .course_name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Romford";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          {true ? (
            <div
              data-plasmic-name={"title3"}
              data-plasmic-override={overrides.title3}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.title3
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `${
                      new Date(
                        `1970-01-01T${$queries.getData.data.response.race_summary.time}:00`
                      ).getTime() +
                        10 * 60 * 60 * 1000 >=
                      0
                        ? new Date(
                            new Date(
                              `1970-01-01T${$queries.getData.data.response.race_summary.time}:00`
                            ).getTime() +
                              10 * 60 * 60 * 1000
                          ).toLocaleTimeString([], {
                            hour: "numeric",
                            minute: "2-digit",
                            hour12: true
                          })
                        : new Date(
                            new Date(
                              `1970-01-02T${$queries.getData.data.response.race_summary.time}:00`
                            ).getTime() +
                              10 * 60 * 60 * 1000
                          ).toLocaleTimeString([], {
                            hour: "numeric",
                            minute: "2-digit",
                            hour12: true
                          })
                    } - ${
                      $queries.getData.data.response.race_summary.race_class
                    } - ${
                      $queries.getData.data.response.race_summary.distance
                    }`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Romford";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
      ) : null}
      {(() => {
        try {
          return $state.currentRaceOpen !== 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"processedData3"}
          data-plasmic-override={overrides.processedData3}
          className={classNames(projectcss.all, sty.processedData3)}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"allTImes"}
              data-plasmic-override={overrides.allTImes}
              hasGap={true}
              className={classNames(projectcss.all, sty.allTImes)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"avg"}
                  data-plasmic-override={overrides.avg}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.avg)}
                >
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tjDby
                      )}
                    >
                      {"Time"}
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bFdLp
                      )}
                    >
                      {"St Dev"}
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n1Ml7
                      )}
                    >
                      {"Last 3"}
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bcBeh
                      )}
                    >
                      {"St Dev"}
                    </div>
                  ) : null}
                </p.Stack>
              ) : null}
              {true
                ? (
                    (() => {
                      try {
                        return $queries.getData.data.response.runs;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })() ?? []
                  ).map((currentItem, currentIndex) => (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"dataAll"}
                      data-plasmic-override={overrides.dataAll}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.dataAll)}
                      key={currentIndex}
                    >
                      {true
                        ? (() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.dataValue
                              ),
                              dataValue: (() => {
                                try {
                                  return (() => {
                                    const results =
                                      currentItem.greyhound.previous_results
                                        .filter(
                                          item =>
                                            item.distance ===
                                            $queries.getData.data.response
                                              .race_summary.distance
                                        )
                                        .slice(0, 8);
                                    const validResults = results.filter(
                                      item =>
                                        Number(item.run_time.slice(0, -1)) >=
                                          10 &&
                                        Number(item.run_time.slice(0, -1)) <= 40
                                    );
                                    return validResults.length > 0
                                      ? Number(
                                          (
                                            validResults.reduce(
                                              (total, item) =>
                                                total +
                                                Number(
                                                  item.run_time.slice(0, -1)
                                                ),
                                              0
                                            ) / validResults.length
                                          ).toFixed(2)
                                        )
                                      : 0;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              getData: $queries.getData,
                              onDataClick: p.generateStateValueProp($state, [
                                "dataValue",
                                currentIndex,
                                "onDataClick"
                              ]),
                              onOnDataClickChange: p.generateStateOnChangeProp(
                                $state,
                                ["dataValue", currentIndex, "onDataClick"]
                              )
                            };
                            p.initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "dataValue[].onDataClick",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    undefined
                                }
                              ],

                              [currentIndex]
                            );
                            return (
                              <DataValue
                                data-plasmic-name={"dataValue"}
                                data-plasmic-override={overrides.dataValue}
                                {...child$Props}
                              />
                            );
                          })()
                        : null}
                      {true
                        ? (() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.dataValue2
                              ),
                              dataValue: (() => {
                                try {
                                  return (() => {
                                    const results =
                                      currentItem.greyhound.previous_results
                                        .filter(
                                          item =>
                                            item.distance ===
                                            $queries.getData.data.response
                                              .race_summary.distance
                                        )
                                        .slice(0, 8);
                                    const validResults = results.filter(
                                      item =>
                                        Number(item.run_time.slice(0, -1)) >=
                                          10 &&
                                        Number(item.run_time.slice(0, -1)) <= 40
                                    );
                                    const averageTime =
                                      validResults.length > 0
                                        ? Number(
                                            Math.sqrt(
                                              validResults.reduce(
                                                (total, item) =>
                                                  total +
                                                  Math.pow(
                                                    Number(
                                                      item.run_time.slice(0, -1)
                                                    ) -
                                                      validResults.reduce(
                                                        (sum, item) =>
                                                          sum +
                                                          Number(
                                                            item.run_time.slice(
                                                              0,
                                                              -1
                                                            )
                                                          ),
                                                        0
                                                      ) /
                                                        validResults.length,
                                                    2
                                                  ),
                                                0
                                              ) / validResults.length
                                            ).toFixed(4)
                                          )
                                        : 0;
                                    return averageTime !== 0
                                      ? averageTime
                                      : "No Data";
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              getData: $queries.getData,
                              onDataClick: p.generateStateValueProp($state, [
                                "dataValue2",
                                currentIndex,
                                "onDataClick"
                              ]),
                              onOnDataClickChange: p.generateStateOnChangeProp(
                                $state,
                                ["dataValue2", currentIndex, "onDataClick"]
                              )
                            };
                            p.initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "dataValue2[].onDataClick",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return $state.clickOutside;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],

                              [currentIndex]
                            );
                            return (
                              <DataValue
                                data-plasmic-name={"dataValue2"}
                                data-plasmic-override={overrides.dataValue2}
                                {...child$Props}
                              />
                            );
                          })()
                        : null}
                      {true
                        ? (() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.dataValue3
                              ),
                              dataValue: (() => {
                                try {
                                  return (
                                    Number(
                                      (
                                        currentItem.greyhound.previous_results
                                          .filter(
                                            item =>
                                              item.distance ===
                                              $queries.getData.data.response
                                                .race_summary.distance
                                          )
                                          .map(item =>
                                            Number(item.run_time.slice(0, -1))
                                          )
                                          .filter(
                                            time => time >= 10 && time <= 40
                                          )
                                          .slice(0, 4)
                                          .reduce(
                                            (total, time) => total + time,
                                            0
                                          ) /
                                        currentItem.greyhound.previous_results
                                          .filter(
                                            item =>
                                              item.distance ===
                                              $queries.getData.data.response
                                                .race_summary.distance
                                          )
                                          .map(item =>
                                            Number(item.run_time.slice(0, -1))
                                          )
                                          .filter(
                                            time => time >= 10 && time <= 40
                                          )
                                          .slice(0, 4).length
                                      ).toFixed(2)
                                    ) || "No Data"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              getData: $queries.getData,
                              onDataClick: p.generateStateValueProp($state, [
                                "dataValue3",
                                currentIndex,
                                "onDataClick"
                              ]),
                              onOnDataClickChange: p.generateStateOnChangeProp(
                                $state,
                                ["dataValue3", currentIndex, "onDataClick"]
                              )
                            };
                            p.initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "dataValue3[].onDataClick",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    undefined
                                }
                              ],

                              [currentIndex]
                            );
                            return (
                              <DataValue
                                data-plasmic-name={"dataValue3"}
                                data-plasmic-override={overrides.dataValue3}
                                {...child$Props}
                              />
                            );
                          })()
                        : null}
                      {true
                        ? (() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.dataValue4
                              ),
                              dataValue: (() => {
                                try {
                                  return (
                                    Number(
                                      Math.sqrt(
                                        currentItem.greyhound.previous_results
                                          .filter(
                                            item =>
                                              item.distance ===
                                              $queries.getData.data.response
                                                .race_summary.distance
                                          )
                                          .map(item =>
                                            Number(item.run_time.slice(0, -1))
                                          )
                                          .filter(
                                            time => time >= 10 && time <= 40
                                          )
                                          .slice(0, 4)
                                          .reduce(
                                            (total, time, _, arr) =>
                                              total +
                                              Math.pow(
                                                time -
                                                  arr.reduce(
                                                    (avg, t) => avg + t,
                                                    0
                                                  ) /
                                                    arr.length,
                                                2
                                              ),
                                            0
                                          ) /
                                          currentItem.greyhound.previous_results
                                            .filter(
                                              item =>
                                                item.distance ===
                                                $queries.getData.data.response
                                                  .race_summary.distance
                                            )
                                            .map(item =>
                                              Number(item.run_time.slice(0, -1))
                                            )
                                            .filter(
                                              time => time >= 10 && time <= 40
                                            )
                                            .slice(0, 4).length
                                      ).toFixed(4)
                                    ) || "No Data"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              getData: $queries.getData,
                              onDataClick: p.generateStateValueProp($state, [
                                "dataValue4",
                                currentIndex,
                                "onDataClick"
                              ]),
                              onOnDataClickChange: p.generateStateOnChangeProp(
                                $state,
                                ["dataValue4", currentIndex, "onDataClick"]
                              )
                            };
                            p.initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "dataValue4[].onDataClick",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    undefined
                                }
                              ],

                              [currentIndex]
                            );
                            return (
                              <DataValue
                                data-plasmic-name={"dataValue4"}
                                data-plasmic-override={overrides.dataValue4}
                                {...child$Props}
                              />
                            );
                          })()
                        : null}
                    </p.Stack>
                  ))
                : null}
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"last3"}
              data-plasmic-override={overrides.last3}
              hasGap={true}
              className={classNames(projectcss.all, sty.last3)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"title"}
                  data-plasmic-override={overrides.title}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.title)}
                >
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xEKcd
                      )}
                    >
                      {"Sec Time"}
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uOcM2
                      )}
                    >
                      {"St Dev"}
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j02D
                      )}
                    >
                      {"Last 3"}
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gkXc
                      )}
                    >
                      {"St. Dev"}
                    </div>
                  ) : null}
                </p.Stack>
              ) : null}
              {true
                ? (
                    (() => {
                      try {
                        return $queries.getData.data.response.runs;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })() ?? []
                  ).map((currentItem, currentIndex) => (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"dataLast3"}
                      data-plasmic-override={overrides.dataLast3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.dataLast3)}
                      key={currentIndex}
                    >
                      {true
                        ? (() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.dataValue5
                              ),
                              dataValue: (() => {
                                try {
                                  return Number(
                                    (
                                      currentItem.greyhound.previous_results
                                        .filter(
                                          item =>
                                            item.distance ===
                                            $queries.getData.data.response
                                              .race_summary.distance
                                        )
                                        .slice(0, 8)
                                        .reduce(
                                          (total, item) =>
                                            total +
                                            (Number(
                                              item.sectional_time.slice(0, -1)
                                            ) >= 1 &&
                                            Number(
                                              item.sectional_time.slice(0, -1)
                                            ) <= 7
                                              ? Number(
                                                  item.sectional_time.slice(
                                                    0,
                                                    -1
                                                  )
                                                )
                                              : 0),
                                          0
                                        ) /
                                      currentItem.greyhound.previous_results
                                        .filter(
                                          item =>
                                            item.distance ===
                                            $queries.getData.data.response
                                              .race_summary.distance
                                        )
                                        .slice(0, 8)
                                        .filter(
                                          item =>
                                            Number(
                                              item.sectional_time.slice(0, -1)
                                            ) >= 1 &&
                                            Number(
                                              item.sectional_time.slice(0, -1)
                                            ) <= 7
                                        ).length
                                    ).toFixed(2)
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              getData: $queries.getData,
                              onDataClick: p.generateStateValueProp($state, [
                                "dataValue5",
                                currentIndex,
                                "onDataClick"
                              ]),
                              onOnDataClickChange: p.generateStateOnChangeProp(
                                $state,
                                ["dataValue5", currentIndex, "onDataClick"]
                              )
                            };
                            p.initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "dataValue5[].onDataClick",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    undefined
                                }
                              ],

                              [currentIndex]
                            );
                            return (
                              <DataValue
                                data-plasmic-name={"dataValue5"}
                                data-plasmic-override={overrides.dataValue5}
                                {...child$Props}
                              />
                            );
                          })()
                        : null}
                      {true
                        ? (() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.dataValue6
                              ),
                              dataValue: (() => {
                                try {
                                  return Number(
                                    Math.sqrt(
                                      currentItem.greyhound.previous_results
                                        .filter(
                                          item =>
                                            item.distance ===
                                            $queries.getData.data.response
                                              .race_summary.distance
                                        )
                                        .slice(0, 8)
                                        .map(item =>
                                          Number(
                                            item.sectional_time.slice(0, -1)
                                          )
                                        )
                                        .filter(time => time >= 1 && time <= 7)
                                        .reduce(
                                          (total, time, _, arr) =>
                                            total +
                                            Math.pow(
                                              time -
                                                arr.reduce(
                                                  (avg, t) => avg + t,
                                                  0
                                                ) /
                                                  arr.length,
                                              2
                                            ),
                                          0
                                        ) /
                                        currentItem.greyhound.previous_results
                                          .filter(
                                            item =>
                                              item.distance ===
                                              $queries.getData.data.response
                                                .race_summary.distance
                                          )
                                          .slice(0, 8)
                                          .map(item =>
                                            Number(
                                              item.sectional_time.slice(0, -1)
                                            )
                                          )
                                          .filter(
                                            time => time >= 1 && time <= 7
                                          ).length
                                    ).toFixed(4)
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              getData: $queries.getData,
                              onDataClick: p.generateStateValueProp($state, [
                                "dataValue6",
                                currentIndex,
                                "onDataClick"
                              ]),
                              onOnDataClickChange: p.generateStateOnChangeProp(
                                $state,
                                ["dataValue6", currentIndex, "onDataClick"]
                              )
                            };
                            p.initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "dataValue6[].onDataClick",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    undefined
                                }
                              ],

                              [currentIndex]
                            );
                            return (
                              <DataValue
                                data-plasmic-name={"dataValue6"}
                                data-plasmic-override={overrides.dataValue6}
                                {...child$Props}
                              />
                            );
                          })()
                        : null}
                      {true
                        ? (() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.dataValue7
                              ),
                              dataValue: (() => {
                                try {
                                  return Number(
                                    (
                                      currentItem.greyhound.previous_results
                                        .filter(
                                          item =>
                                            item.distance ===
                                            $queries.getData.data.response
                                              .race_summary.distance
                                        )
                                        .map(item =>
                                          Number(
                                            item.sectional_time.slice(0, -1)
                                          )
                                        )
                                        .filter(time => time >= 1 && time <= 7)
                                        .slice(0, 4)
                                        .reduce(
                                          (total, time) => total + time,
                                          0
                                        ) /
                                      currentItem.greyhound.previous_results
                                        .filter(
                                          item =>
                                            item.distance ===
                                            $queries.getData.data.response
                                              .race_summary.distance
                                        )
                                        .map(item =>
                                          Number(
                                            item.sectional_time.slice(0, -1)
                                          )
                                        )
                                        .filter(time => time >= 1 && time <= 7)
                                        .slice(0, 4).length
                                    ).toFixed(2)
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              getData: $queries.getData,
                              onDataClick: p.generateStateValueProp($state, [
                                "dataValue7",
                                currentIndex,
                                "onDataClick"
                              ]),
                              onOnDataClickChange: p.generateStateOnChangeProp(
                                $state,
                                ["dataValue7", currentIndex, "onDataClick"]
                              )
                            };
                            p.initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "dataValue7[].onDataClick",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    undefined
                                }
                              ],

                              [currentIndex]
                            );
                            return (
                              <DataValue
                                data-plasmic-name={"dataValue7"}
                                data-plasmic-override={overrides.dataValue7}
                                {...child$Props}
                              />
                            );
                          })()
                        : null}
                      {true
                        ? (() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.dataValue8
                              ),
                              dataValue: (() => {
                                try {
                                  return Number(
                                    Math.sqrt(
                                      currentItem.greyhound.previous_results
                                        .filter(
                                          item =>
                                            item.distance ===
                                            $queries.getData.data.response
                                              .race_summary.distance
                                        )
                                        .map(item =>
                                          Number(
                                            item.sectional_time.slice(0, -1)
                                          )
                                        )
                                        .filter(time => time >= 1 && time <= 7)
                                        .slice(0, 4)
                                        .reduce(
                                          (total, time, _, arr) =>
                                            total +
                                            Math.pow(
                                              time -
                                                arr.reduce(
                                                  (avg, t) => avg + t,
                                                  0
                                                ) /
                                                  arr.length,
                                              2
                                            ),
                                          0
                                        ) /
                                        currentItem.greyhound.previous_results
                                          .filter(
                                            item =>
                                              item.distance ===
                                              $queries.getData.data.response
                                                .race_summary.distance
                                          )
                                          .map(item =>
                                            Number(
                                              item.sectional_time.slice(0, -1)
                                            )
                                          )
                                          .filter(
                                            time => time >= 1 && time <= 7
                                          )
                                          .slice(0, 4).length
                                    ).toFixed(4)
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              getData: $queries.getData,
                              onDataClick: p.generateStateValueProp($state, [
                                "dataValue8",
                                currentIndex,
                                "onDataClick"
                              ]),
                              onOnDataClickChange: p.generateStateOnChangeProp(
                                $state,
                                ["dataValue8", currentIndex, "onDataClick"]
                              )
                            };
                            p.initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "dataValue8[].onDataClick",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    undefined
                                }
                              ],

                              [currentIndex]
                            );
                            return (
                              <DataValue
                                data-plasmic-name={"dataValue8"}
                                data-plasmic-override={overrides.dataValue8}
                                {...child$Props}
                              />
                            );
                          })()
                        : null}
                    </p.Stack>
                  ))
                : null}
            </p.Stack>
          ) : null}
        </div>
      ) : null}
      {true ? (
        <div
          data-plasmic-name={"trapInfo"}
          data-plasmic-override={overrides.trapInfo}
          className={classNames(projectcss.all, sty.trapInfo)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xXt2I
            )}
          >
            {"Trap Info"}
          </div>
        </div>
      ) : null}
    </div>
  ) : null;
}

const PlasmicDescendants = {
  romfordInfo: [
    "romfordInfo",
    "carousel",
    "exampleTrapNameSelector",
    "raceInfo",
    "title2",
    "title3",
    "processedData3",
    "allTImes",
    "avg",
    "dataAll",
    "dataValue",
    "dataValue2",
    "dataValue3",
    "dataValue4",
    "last3",
    "title",
    "dataLast3",
    "dataValue5",
    "dataValue6",
    "dataValue7",
    "dataValue8",
    "trapInfo"
  ],

  carousel: ["carousel", "exampleTrapNameSelector"],
  exampleTrapNameSelector: ["exampleTrapNameSelector"],
  raceInfo: ["raceInfo", "title2", "title3"],
  title2: ["title2"],
  title3: ["title3"],
  processedData3: [
    "processedData3",
    "allTImes",
    "avg",
    "dataAll",
    "dataValue",
    "dataValue2",
    "dataValue3",
    "dataValue4",
    "last3",
    "title",
    "dataLast3",
    "dataValue5",
    "dataValue6",
    "dataValue7",
    "dataValue8"
  ],

  allTImes: [
    "allTImes",
    "avg",
    "dataAll",
    "dataValue",
    "dataValue2",
    "dataValue3",
    "dataValue4"
  ],

  avg: ["avg"],
  dataAll: ["dataAll", "dataValue", "dataValue2", "dataValue3", "dataValue4"],
  dataValue: ["dataValue"],
  dataValue2: ["dataValue2"],
  dataValue3: ["dataValue3"],
  dataValue4: ["dataValue4"],
  last3: [
    "last3",
    "title",
    "dataLast3",
    "dataValue5",
    "dataValue6",
    "dataValue7",
    "dataValue8"
  ],

  title: ["title"],
  dataLast3: [
    "dataLast3",
    "dataValue5",
    "dataValue6",
    "dataValue7",
    "dataValue8"
  ],

  dataValue5: ["dataValue5"],
  dataValue6: ["dataValue6"],
  dataValue7: ["dataValue7"],
  dataValue8: ["dataValue8"],
  trapInfo: ["trapInfo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRaceCardsInfo__ArgProps,
          internalVariantPropNames: PlasmicRaceCardsInfo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRaceCardsInfo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "romfordInfo") {
    func.displayName = "PlasmicRaceCardsInfo";
  } else {
    func.displayName = `PlasmicRaceCardsInfo.${nodeName}`;
  }
  return func;
}

export const PlasmicRaceCardsInfo = Object.assign(
  // Top-level PlasmicRaceCardsInfo renders the root element
  makeNodeComponent("romfordInfo"),
  {
    // Helper components rendering sub-elements
    carousel: makeNodeComponent("carousel"),
    exampleTrapNameSelector: makeNodeComponent("exampleTrapNameSelector"),
    raceInfo: makeNodeComponent("raceInfo"),
    title2: makeNodeComponent("title2"),
    title3: makeNodeComponent("title3"),
    processedData3: makeNodeComponent("processedData3"),
    allTImes: makeNodeComponent("allTImes"),
    avg: makeNodeComponent("avg"),
    dataAll: makeNodeComponent("dataAll"),
    dataValue: makeNodeComponent("dataValue"),
    dataValue2: makeNodeComponent("dataValue2"),
    dataValue3: makeNodeComponent("dataValue3"),
    dataValue4: makeNodeComponent("dataValue4"),
    last3: makeNodeComponent("last3"),
    title: makeNodeComponent("title"),
    dataLast3: makeNodeComponent("dataLast3"),
    dataValue5: makeNodeComponent("dataValue5"),
    dataValue6: makeNodeComponent("dataValue6"),
    dataValue7: makeNodeComponent("dataValue7"),
    dataValue8: makeNodeComponent("dataValue8"),
    trapInfo: makeNodeComponent("trapInfo"),
    // Metadata about props expected for PlasmicRaceCardsInfo
    internalVariantProps: PlasmicRaceCardsInfo__VariantProps,
    internalArgProps: PlasmicRaceCardsInfo__ArgProps
  }
);

export default PlasmicRaceCardsInfo;
/* prettier-ignore-end */
