// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: RPnMKWgCkZkYcGGLNc86X
// Component: pcE25V2Pf8KB3
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import DefaultSection from "../../DefaultSection"; // plasmic-import: k8PcH5iLYtxNU/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_best_main_a_pp.module.css"; // plasmic-import: RPnMKWgCkZkYcGGLNc86X/projectcss
import sty from "./PlasmicGuitar.module.css"; // plasmic-import: pcE25V2Pf8KB3/css

export const PlasmicGuitar__VariantProps = new Array();

export const PlasmicGuitar__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGuitar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "musicPageElements",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            Guitar: [
              { Heading: "Modes", selector_value: 0 },
              { Heading: "Videos", selector_value: 1 },
              { Heading: "Practice Planner", selector_value: 2 }
            ]
          },
          {
            "Music Production": [
              { Heading: "Videos", selector_value: 3 },
              { Heading: "Articles", selector_value: 4 },
              { Heading: "The High Seas", selector_value: 5 }
            ]
          },
          {
            Piano: [
              { Heading: "Videos", selector_value: 6 },
              { Heading: "Articles", selector_value: 7 },
              { Heading: "The High Seas", selector_value: 8 }
            ]
          }
        ]
      },
      {
        path: "pageSelectionReceiver",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 100
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"landingPage"}
          data-plasmic-override={overrides.landingPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.landingPage
          )}
        >
          {true ? (
            <section
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__wrIgi)}>
                {true ? (
                  <div
                    data-plasmic-name={"leftSide"}
                    data-plasmic-override={overrides.leftSide}
                    className={classNames(projectcss.all, sty.leftSide)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0ZMrl
                      )}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToHomepage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "navigation",
                                    interactionUuid: "C7T4BqMMXv3-e",
                                    componentUuid: "pcE25V2Pf8KB3",
                                    argName: "destination"
                                  },
                                  () => `/`
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "C7T4BqMMXv3-e",
                                  componentUuid: "pcE25V2Pf8KB3"
                                },
                                () =>
                                  (({ destination }) => {
                                    __nextRouter?.push(destination);
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["goToHomepage"] === "object" &&
                          typeof $steps["goToHomepage"].then === "function"
                        ) {
                          $steps["goToHomepage"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "C7T4BqMMXv3-e",
                              componentUuid: "pcE25V2Pf8KB3"
                            },
                            $steps["goToHomepage"]
                          );
                        }
                      }}
                    >
                      {"Menu"}
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"leftSide2"}
                    data-plasmic-override={overrides.leftSide2}
                    className={classNames(projectcss.all, sty.leftSide2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__a57YA
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const targetDate = new Date("2024-01-04");
                              const currentDate = new Date();
                              const timeDiff =
                                targetDate.getTime() - currentDate.getTime();
                              const days = Math.ceil(
                                timeDiff / (1000 * 3600 * 24)
                              );
                              const weeks = Math.floor(days / 7);
                              const remainingDays = days % 7;
                              const months = Math.floor(weeks / 4);
                              const remainingWeeks = weeks % 4;
                              let result = `${months} months, ${remainingWeeks} week, ${remainingDays} days`;
                              if (months === 1) {
                                result = result.replace("months", "month");
                              }
                              if (weeks === 1) {
                                result = result.replace("weeks", "week");
                              }
                              if (remainingDays === 1) {
                                result = result.replace("days", "day");
                              }
                              if (remainingDays === 6) {
                                result = result.replace("days", "days");
                              } else {
                                result = result.replace("days", "day");
                              }
                              return result;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"rightSide"}
                    data-plasmic-override={overrides.rightSide}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.rightSide)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__slcl1
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const now = new Date();
                              let hours = now.getHours();
                              let minutes = now.getMinutes();
                              let ampm = hours >= 12 ? " pm" : " am";
                              hours = hours % 12;
                              hours = hours ? hours : 12;
                              minutes = minutes < 10 ? "0" + minutes : minutes;
                              const time = hours + ":" + minutes + ampm;
                              return time;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xaqYq
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              new Date().toLocaleString("default", {
                                month: "long"
                              }) +
                              " " +
                              (() => {
                                const dayOfMonth = new Date().getDate();
                                let ordinalNumber;
                                if (
                                  dayOfMonth === 1 ||
                                  dayOfMonth === 21 ||
                                  dayOfMonth === 31
                                ) {
                                  ordinalNumber = `${dayOfMonth}st`;
                                } else if (
                                  dayOfMonth === 2 ||
                                  dayOfMonth === 22
                                ) {
                                  ordinalNumber = `${dayOfMonth}nd`;
                                } else if (
                                  dayOfMonth === 3 ||
                                  dayOfMonth === 23
                                ) {
                                  ordinalNumber = `${dayOfMonth}rd`;
                                } else {
                                  ordinalNumber = `${dayOfMonth}th`;
                                }
                                return ordinalNumber;
                              })()
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </p.Stack>
                ) : null}
              </div>
            </section>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"menu"}
              data-plasmic-override={overrides.menu}
              hasGap={true}
              className={classNames(projectcss.all, sty.menu)}
            >
              {true
                ? (
                    (() => {
                      try {
                        return $state.musicPageElements;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })() ?? []
                  ).map((currentItem, currentIndex) => (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"menuItems"}
                      data-plasmic-override={overrides.menuItems}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.menuItems)}
                      key={currentIndex}
                    >
                      <div
                        data-plasmic-name={"menuTitle"}
                        data-plasmic-override={overrides.menuTitle}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.menuTitle
                        )}
                        onClick={async event => {
                          const $steps = {};
                          $steps["updatePageSelectionReceiver"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "Y8WiMsJ6zXpPF",
                                      componentUuid: "pcE25V2Pf8KB3",
                                      argName: "variable"
                                    },
                                    () => ({
                                      objRoot: $state,
                                      variablePath: ["pageSelectionReceiver"]
                                    })
                                  ),
                                  operation: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "Y8WiMsJ6zXpPF",
                                      componentUuid: "pcE25V2Pf8KB3",
                                      argName: "operation"
                                    },
                                    () => 0
                                  ),
                                  value: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "Y8WiMsJ6zXpPF",
                                      componentUuid: "pcE25V2Pf8KB3",
                                      argName: "value"
                                    },
                                    () => 100
                                  )
                                };
                                return __wrapUserFunction(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "updateVariable",
                                    interactionUuid: "Y8WiMsJ6zXpPF",
                                    componentUuid: "pcE25V2Pf8KB3"
                                  },
                                  () =>
                                    (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;
                                      p.set(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]),
                                  actionArgs
                                );
                              })()
                            : undefined;
                          if (
                            typeof $steps["updatePageSelectionReceiver"] ===
                              "object" &&
                            typeof $steps["updatePageSelectionReceiver"]
                              .then === "function"
                          ) {
                            $steps["updatePageSelectionReceiver"] =
                              await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariable",
                                  interactionUuid: "Y8WiMsJ6zXpPF",
                                  componentUuid: "pcE25V2Pf8KB3"
                                },
                                $steps["updatePageSelectionReceiver"]
                              );
                          }
                        }}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return Object.keys(currentItem)[0];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Guitar";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {true
                        ? (
                            (() => {
                              try {
                                return $state.musicPageElements[currentIndex][
                                  Object.keys(currentItem)[0]
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })() ?? []
                          ).map((currentItem, currentIndex) => (
                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"menuContent"}
                              data-plasmic-override={overrides.menuContent}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.menuContent
                              )}
                              key={currentIndex}
                            >
                              {(() => {
                                try {
                                  return !(
                                    currentItem.selector_value ===
                                    $state.pageSelectionReceiver
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  data-plasmic-name={"header"}
                                  data-plasmic-override={overrides.header}
                                  autoCorrect={(() => {
                                    try {
                                      return {
                                        autoCorrect: "on"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.header
                                  )}
                                  onClick={async event => {
                                    const $steps = {};
                                    $steps["updatePageSelectionReceiver"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: __wrapUserFunction(
                                              {
                                                type: "InteractionArgLoc",
                                                actionName: "updateVariable",
                                                interactionUuid:
                                                  "I9auYKlPUGawr",
                                                componentUuid: "pcE25V2Pf8KB3",
                                                argName: "variable"
                                              },
                                              () => ({
                                                objRoot: $state,
                                                variablePath: [
                                                  "pageSelectionReceiver"
                                                ]
                                              })
                                            ),
                                            operation: __wrapUserFunction(
                                              {
                                                type: "InteractionArgLoc",
                                                actionName: "updateVariable",
                                                interactionUuid:
                                                  "I9auYKlPUGawr",
                                                componentUuid: "pcE25V2Pf8KB3",
                                                argName: "operation"
                                              },
                                              () => 0
                                            ),
                                            value: __wrapUserFunction(
                                              {
                                                type: "InteractionArgLoc",
                                                actionName: "updateVariable",
                                                interactionUuid:
                                                  "I9auYKlPUGawr",
                                                componentUuid: "pcE25V2Pf8KB3",
                                                argName: "value"
                                              },
                                              () => currentItem.selector_value
                                            )
                                          };
                                          return __wrapUserFunction(
                                            {
                                              type: "InteractionLoc",
                                              actionName: "updateVariable",
                                              interactionUuid: "I9auYKlPUGawr",
                                              componentUuid: "pcE25V2Pf8KB3"
                                            },
                                            () =>
                                              (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;
                                                p.set(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]),
                                            actionArgs
                                          );
                                        })()
                                      : undefined;
                                    if (
                                      typeof $steps[
                                        "updatePageSelectionReceiver"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updatePageSelectionReceiver"
                                      ].then === "function"
                                    ) {
                                      $steps["updatePageSelectionReceiver"] =
                                        await __wrapUserPromise(
                                          {
                                            type: "InteractionLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "I9auYKlPUGawr",
                                            componentUuid: "pcE25V2Pf8KB3"
                                          },
                                          $steps["updatePageSelectionReceiver"]
                                        );
                                    }
                                  }}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.Heading;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Guitar";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              ) : null}
                              {true ? (
                                <p.Stack
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xTqhL
                                  )}
                                >
                                  {true ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__vczfC
                                      )}
                                    >
                                      {
                                        "This is going to be my page for my modes"
                                      }
                                    </div>
                                  ) : null}
                                </p.Stack>
                              ) : null}
                              <Reveal
                                data-plasmic-name={"modes2"}
                                data-plasmic-override={overrides.modes2}
                                cascade={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.modes2
                                )}
                                damping={1}
                                triggerOnce={false}
                              >
                                {(() => {
                                  try {
                                    return (
                                      currentItem.selector_value ===
                                        $state.pageSelectionReceiver &&
                                      $state.pageSelectionReceiver === 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <DefaultSection
                                    data-plasmic-name={"modes"}
                                    data-plasmic-override={overrides.modes}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.modes
                                    )}
                                    content={
                                      <React.Fragment>
                                        <section
                                          data-plasmic-name={"header4"}
                                          data-plasmic-override={
                                            overrides.header4
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.header4
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__i1DfY
                                            )}
                                          >
                                            {"Modes"}
                                          </div>
                                        </section>
                                        <section
                                          data-plasmic-name={"header2"}
                                          data-plasmic-override={
                                            overrides.header2
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.header2
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__iu9Sa
                                            )}
                                          >
                                            {"What the Fuck are modes??? "}
                                          </div>
                                        </section>
                                        <section
                                          data-plasmic-name={"header3"}
                                          data-plasmic-override={
                                            overrides.header3
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.header3
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__gTo4
                                            )}
                                          >
                                            {
                                              "Look buddy, you and me are in the same boat. Cause I'm lost. Like, I always hear people talk about them and when you're supposed to use them, but that means nothing to me. Anyways, we're gonna figure out a solution.. Got it??"
                                            }
                                          </div>
                                        </section>
                                      </React.Fragment>
                                    }
                                  />
                                ) : null}
                              </Reveal>
                              <Reveal
                                data-plasmic-name={"videos"}
                                data-plasmic-override={overrides.videos}
                                cascade={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.videos
                                )}
                                damping={1}
                                triggerOnce={false}
                              >
                                {(() => {
                                  try {
                                    return (
                                      currentItem.selector_value ===
                                        $state.pageSelectionReceiver &&
                                      $state.pageSelectionReceiver === 1
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <DefaultSection
                                    data-plasmic-name={"videos2"}
                                    data-plasmic-override={overrides.videos2}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.videos2
                                    )}
                                    content={
                                      <React.Fragment>
                                        <section
                                          data-plasmic-name={"header5"}
                                          data-plasmic-override={
                                            overrides.header5
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.header5
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__keUSt
                                            )}
                                          >
                                            {"Videos"}
                                          </div>
                                        </section>
                                        <section
                                          data-plasmic-name={"header6"}
                                          data-plasmic-override={
                                            overrides.header6
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.header6
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__qwcIf
                                            )}
                                          >
                                            {
                                              "Ok, so in here imma give you some videos to watch"
                                            }
                                          </div>
                                        </section>
                                        <section
                                          data-plasmic-name={"header7"}
                                          data-plasmic-override={
                                            overrides.header7
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.header7
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__nHvnP
                                            )}
                                          >
                                            {
                                              "I haven't gotten up to it yet, but my god will it be worth it. You're gonna have wayyyy to much shit to look at like is gonna be crazy i promise."
                                            }
                                          </div>
                                        </section>
                                      </React.Fragment>
                                    }
                                  />
                                ) : null}
                              </Reveal>
                              <Reveal
                                data-plasmic-name={"practicePlanner"}
                                data-plasmic-override={
                                  overrides.practicePlanner
                                }
                                cascade={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.practicePlanner
                                )}
                                damping={1}
                                triggerOnce={false}
                              >
                                {(() => {
                                  try {
                                    return (
                                      currentItem.selector_value ===
                                        $state.pageSelectionReceiver &&
                                      $state.pageSelectionReceiver === 2
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <DefaultSection
                                    data-plasmic-name={"videos4"}
                                    data-plasmic-override={overrides.videos4}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.videos4
                                    )}
                                    content={
                                      <React.Fragment>
                                        <section
                                          data-plasmic-name={"header8"}
                                          data-plasmic-override={
                                            overrides.header8
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.header8
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ipeJ0
                                            )}
                                          >
                                            {"Practice Planner"}
                                          </div>
                                        </section>
                                        <section
                                          data-plasmic-name={"header9"}
                                          data-plasmic-override={
                                            overrides.header9
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.header9
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___8Hif9
                                            )}
                                          >
                                            {
                                              "This is the section where you realise you need to get your practice shit together."
                                            }
                                          </div>
                                        </section>
                                        <section
                                          data-plasmic-name={"header10"}
                                          data-plasmic-override={
                                            overrides.header10
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.header10
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__h66Bx
                                            )}
                                          >
                                            {
                                              "Aight,\nso how I see it working is you're gonna have a table with what you're learning, how far you've gotten through learning, and then the bits you need to keep working at. On top of that, you can have a little journal just to keep track of your progress."
                                            }
                                          </div>
                                        </section>
                                      </React.Fragment>
                                    }
                                  />
                                ) : null}
                              </Reveal>
                            </p.Stack>
                          ))
                        : null}
                    </p.Stack>
                  ))
                : null}
            </p.Stack>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  landingPage: [
    "landingPage",
    "title",
    "leftSide",
    "leftSide2",
    "rightSide",
    "menu",
    "menuItems",
    "menuTitle",
    "menuContent",
    "header",
    "modes2",
    "modes",
    "header4",
    "header2",
    "header3",
    "videos",
    "videos2",
    "header5",
    "header6",
    "header7",
    "practicePlanner",
    "videos4",
    "header8",
    "header9",
    "header10"
  ],

  title: ["title", "leftSide", "leftSide2", "rightSide"],
  leftSide: ["leftSide"],
  leftSide2: ["leftSide2"],
  rightSide: ["rightSide"],
  menu: [
    "menu",
    "menuItems",
    "menuTitle",
    "menuContent",
    "header",
    "modes2",
    "modes",
    "header4",
    "header2",
    "header3",
    "videos",
    "videos2",
    "header5",
    "header6",
    "header7",
    "practicePlanner",
    "videos4",
    "header8",
    "header9",
    "header10"
  ],

  menuItems: [
    "menuItems",
    "menuTitle",
    "menuContent",
    "header",
    "modes2",
    "modes",
    "header4",
    "header2",
    "header3",
    "videos",
    "videos2",
    "header5",
    "header6",
    "header7",
    "practicePlanner",
    "videos4",
    "header8",
    "header9",
    "header10"
  ],

  menuTitle: ["menuTitle"],
  menuContent: [
    "menuContent",
    "header",
    "modes2",
    "modes",
    "header4",
    "header2",
    "header3",
    "videos",
    "videos2",
    "header5",
    "header6",
    "header7",
    "practicePlanner",
    "videos4",
    "header8",
    "header9",
    "header10"
  ],

  header: ["header"],
  modes2: ["modes2", "modes", "header4", "header2", "header3"],
  modes: ["modes", "header4", "header2", "header3"],
  header4: ["header4"],
  header2: ["header2"],
  header3: ["header3"],
  videos: ["videos", "videos2", "header5", "header6", "header7"],
  videos2: ["videos2", "header5", "header6", "header7"],
  header5: ["header5"],
  header6: ["header6"],
  header7: ["header7"],
  practicePlanner: [
    "practicePlanner",
    "videos4",
    "header8",
    "header9",
    "header10"
  ],

  videos4: ["videos4", "header8", "header9", "header10"],
  header8: ["header8"],
  header9: ["header9"],
  header10: ["header10"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGuitar__ArgProps,
          internalVariantPropNames: PlasmicGuitar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGuitar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "landingPage") {
    func.displayName = "PlasmicGuitar";
  } else {
    func.displayName = `PlasmicGuitar.${nodeName}`;
  }
  return func;
}

export const PlasmicGuitar = Object.assign(
  // Top-level PlasmicGuitar renders the root element
  makeNodeComponent("landingPage"),
  {
    // Helper components rendering sub-elements
    title: makeNodeComponent("title"),
    leftSide: makeNodeComponent("leftSide"),
    leftSide2: makeNodeComponent("leftSide2"),
    rightSide: makeNodeComponent("rightSide"),
    menu: makeNodeComponent("menu"),
    menuItems: makeNodeComponent("menuItems"),
    menuTitle: makeNodeComponent("menuTitle"),
    menuContent: makeNodeComponent("menuContent"),
    header: makeNodeComponent("header"),
    modes2: makeNodeComponent("modes2"),
    modes: makeNodeComponent("modes"),
    header4: makeNodeComponent("header4"),
    header2: makeNodeComponent("header2"),
    header3: makeNodeComponent("header3"),
    videos: makeNodeComponent("videos"),
    videos2: makeNodeComponent("videos2"),
    header5: makeNodeComponent("header5"),
    header6: makeNodeComponent("header6"),
    header7: makeNodeComponent("header7"),
    practicePlanner: makeNodeComponent("practicePlanner"),
    videos4: makeNodeComponent("videos4"),
    header8: makeNodeComponent("header8"),
    header9: makeNodeComponent("header9"),
    header10: makeNodeComponent("header10"),
    // Metadata about props expected for PlasmicGuitar
    internalVariantProps: PlasmicGuitar__VariantProps,
    internalArgProps: PlasmicGuitar__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicGuitar;
/* prettier-ignore-end */
